/*
    GPL(GNU Public Library) is a Library Management System.
    Copyright (C) 2012-2013  Shaleen Jain

    This file is part of GPL.

    GPL is a free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package Javapackage;

import Classes.myQueries;
import com.mysql.jdbc.Statement;
import java.awt.*;
import java.sql.ResultSet;
import java.util.Calendar;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainPage.java
 *
 * Created on Jul 12, 2012, 7:57:35 AM
 */
/**
 *
 * @author Shaleen
 */
public class MainPage extends javax.swing.JFrame {

    /** Creates new form MainPage */
    String username1;

    public MainPage() {
        initComponents();

    }

    public MainPage(String username) {
        initComponents();
        username1 = username;
        jLabel4.setText(username1);
        jScrollPane2.setVisible(false);

    }

    @Override
    public void add(Component comp, Object constraints) {
        super.add(comp, constraints);
    }

    @Override
    public final Component add(Component comp) {
        return super.add(comp);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        t2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        t1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        t5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        t6 = new javax.swing.JTextField();
        t7 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        t8 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gurgaon Public Library");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 14));
        jLabel1.setText(" Issuer Name");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 170, -1, -1));
        getContentPane().add(t2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 170, 83, -1));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 14));
        jLabel2.setText("Issuer ID");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, -1));

        t1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t1KeyTyped(evt);
            }
        });
        getContentPane().add(t1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 170, 80, -1));

        jTable1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Book Code", "Book Name", "Issue Date", "Return Date", "Fine Due"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 1000, 240));

        jButton1.setFont(new java.awt.Font("Century Gothic", 2, 12)); // NOI18N
        jButton1.setText("Show Issued Books");
        jButton1.setToolTipText("<html>\n<body bgcolor=\"white\">\n<p align=\"center\">Show Issued Books for a specific user</p>\n</body>\n</html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 260, -1, -1));

        jButton2.setFont(new java.awt.Font("Century Gothic", 2, 12));
        jButton2.setText("Return Book");
        jButton2.setToolTipText("<html>\n<body bgcolor=\"white\">\n<p align=\"center\">Click to Return the Selected Book</p>\n</body>\n</html>");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 230, -1, -1));

        jButton3.setFont(new java.awt.Font("Century Gothic", 2, 12));
        jButton3.setText("Issue Book");
        jButton3.setToolTipText("<html>\n<body bgcolor=\"white\">\n<p align=\"center\">Click to Issue the Selected Book</p>\n</body>\n</html>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, 100, -1));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 20));
        jLabel7.setText("Search book By");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 14));
        jLabel5.setText("Book Code");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, -1, -1));

        t5.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                t5CaretUpdate(evt);
            }
        });
        t5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t5KeyTyped(evt);
            }
        });
        getContentPane().add(t5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 70, -1));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 14));
        jLabel6.setText("Book Name");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 80, -1, -1));

        t6.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                t6CaretUpdate(evt);
            }
        });
        getContentPane().add(t6, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 70, -1));

        t7.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                t7CaretUpdate(evt);
            }
        });
        getContentPane().add(t7, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, 80, -1));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 14));
        jLabel8.setText("Book author");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, -1, -1));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 14));
        jLabel9.setText("Genre");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 80, -1, -1));

        t8.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                t8CaretUpdate(evt);
            }
        });
        getContentPane().add(t8, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 80, 70, -1));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Book Code", "Book Name", "Author", "Genre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 357, 1000, 240));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 14));
        jLabel3.setText("Welcome Administrator!");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, -1, 20));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 30, 70, 20));

        jButton5.setFont(new java.awt.Font("Century Gothic", 2, 12));
        jButton5.setText("Clear");
        jButton5.setToolTipText("<html>\n<body bgcolor=\"white\">\n<p align=\"center\">Click to Clear the search box</p>\n</body>\n</html>");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, -1, -1));

        jButton6.setFont(new java.awt.Font("Century Gothic", 2, 12));
        jButton6.setText("Show details");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 230, 110, -1));

        jButton4.setFont(new java.awt.Font("Century Gothic", 2, 12));
        jButton4.setText("View all Books");
        jButton4.setToolTipText("<html>\n<body bgcolor=\"white\">\n<p align=\"center\">View books available for issue</p>\n</body>\n</html>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(505, 260, 140, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/abstract_color_background_picture_32-1920x1200.jpg"))); // NOI18N
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 600));

        jMenu2.setText("Manage Book Records");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu2MousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu4.setText("User Info");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu4MousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        jMenu3.setText("Options");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu3MousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu1.setText("Log Out");
        jMenu1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jMenu1.setInheritsPopupMenu(true);
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu1MousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1016)/2, (screenSize.height-661)/2, 1016, 661);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jScrollPane1.setVisible(true);
        jScrollPane2.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int FineDue = 0;
        int fine;
        String query = null;
        int issuerId = 0;
        int n = 0;
        String username = t2.getText();

        try 
        {
            issuerId = Integer.parseInt(t1.getText());
        } 
        catch (NumberFormatException e) 
        {
            n = 1;
        }

        if (n == 1) 
        {
            if (username.isEmpty())
            {
                JOptionPane.showMessageDialog(this, "Please enter IssuerID or IssuerName");
            }  
            else 
            {
                query = "select username,issuerid from users where username='" + username + "';";
            }
        } 
        else 
        {
            query = "select username,issuerid from users where issuerId='" + issuerId + "';";
        }
        if (query != null) 
        {
            try {
                
                ResultSet rs = myQueries.excQuery(query);
                rs.next();
                if(!(username.equals("all")))
                {
                username = rs.getString("username");
                query = "select fine from settings;";
                ResultSet rs0 = myQueries.excQuery(query);
                rs0.next();
                fine = rs0.getInt("fine");
               

                query = "SELECT * FROM accounts where username='" + username + "';";
                ResultSet rs1 = myQueries.excQuery(query);
                model.setRowCount(0);
                while (rs1.next())
                {
                    int Bookid = rs1.getInt("Bookcode");
                    String Bookname = rs1.getString("Bookname");
                    Date iDate = rs1.getDate("issueDate");
                    Date rDate = rs1.getDate("ReturnDate");
                    Calendar issueDate = Calendar.getInstance();
                    issueDate.setTime(iDate);
                    Calendar returnDate = Calendar.getInstance();
                    returnDate.setTime(rDate);
                    Calendar curdate = Calendar.getInstance();
                    if (curdate.after(returnDate))
                    {
                        while (curdate.after(returnDate)) 
                        {
                            returnDate.add(Calendar.DAY_OF_MONTH, 1);
                            FineDue++;
                        }
                        returnDate.add(Calendar.DAY_OF_MONTH, -FineDue);
                        FineDue = (FineDue - 1) * fine;

                    }
                    int iyear = issueDate.get(Calendar.YEAR);
                    int imonth = issueDate.get(Calendar.MONTH) + 1;
                    int idayOfMonth = issueDate.get(Calendar.DAY_OF_MONTH);
                    String idate = "" + iyear + "/" + imonth + "/" + idayOfMonth;
                    int ryear = returnDate.get(Calendar.YEAR);
                    int rmonth = returnDate.get(Calendar.MONTH) + 1;
                    int rdayOfMonth = returnDate.get(Calendar.DAY_OF_MONTH);
                    String rdate = "" + ryear + "/" + rmonth + "/" + rdayOfMonth;
                    model.addRow(new Object[]{Bookid, Bookname, idate, rdate, FineDue});
                    FineDue = 0;
                }
               }
                else
                {
                query = "select fine from settings;";
                ResultSet rs0 = myQueries.excQuery(query);
                rs0.next();
                fine = rs0.getInt("fine");
                
                    query = "SELECT * FROM accounts order by username;";
                ResultSet rs1 = myQueries.excQuery(query);
                model.setRowCount(0);
                while (rs1.next()) 
                {
                    int Bookid = rs1.getInt("Bookcode");
                    username = rs1.getString("username");
                    Date iDate = rs1.getDate("issueDate");
                    Date rDate = rs1.getDate("ReturnDate");
                    Calendar issueDate = Calendar.getInstance();
                    issueDate.setTime(iDate);
                    Calendar returnDate = Calendar.getInstance();
                    returnDate.setTime(rDate);
                    Calendar curdate = Calendar.getInstance();
                    if (curdate.after(returnDate)) 
                    {
                        while (curdate.after(returnDate)) 
                        {
                            returnDate.add(Calendar.DAY_OF_MONTH, 1);
                            FineDue++;
                        }
                        returnDate.add(Calendar.DAY_OF_MONTH, -FineDue);
                        FineDue = (FineDue - 1) * fine;

                    }
                    int iyear = issueDate.get(Calendar.YEAR);
                    int imonth = issueDate.get(Calendar.MONTH) + 1;
                    int idayOfMonth = issueDate.get(Calendar.DAY_OF_MONTH);
                    String idate = "" + iyear + "/" + imonth + "/" + idayOfMonth;
                    int ryear = returnDate.get(Calendar.YEAR);
                    int rmonth = returnDate.get(Calendar.MONTH) + 1;
                    int rdayOfMonth = returnDate.get(Calendar.DAY_OF_MONTH);
                    String rdate = "" + ryear + "/" + rmonth + "/" + rdayOfMonth;
                    model.addRow(new Object[]{Bookid, username, idate, rdate, "Rs"+FineDue});
                    FineDue = 0;
                }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void t1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t1KeyTyped
        char kc = evt.getKeyChar();
        if (!(kc >= '0' && kc <= '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_t1KeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
        int count;
        int bookcode = 0;
        int n = 0;
        String bookname = null;
        String query;
        int issuerid = 0;
        int m = 0;
        String username = t2.getText();
        String query1 = null;
        int r = 0;
        int row = jTable2.getSelectedRow();
        if (row == -1)
        {
            JOptionPane.showMessageDialog(this, "Please Select a Book");
        } 
        else 
        {
            bookcode = (Integer) model1.getValueAt(row, 0);
            bookname = (String) model1.getValueAt(row, 1);
        }

        try 
        {
            issuerid = Integer.parseInt(t1.getText());
        } 
        catch (NumberFormatException e) 
        {
            m = 1;
        }

        if (!(m == 1))
        {
            query1 = "select issuerid , username from users where issuerid=" + issuerid + ";";
        } 
        else if (!(username.isEmpty())) 
        {
            query1 = "select issuerid , username from users where username='" + username + "';";

        } 
        else if (!(n == 1 && username.isEmpty())) 
        {
            JOptionPane.showMessageDialog(this, "Please Enter any one of the user identifiers");
        }
        else 
        {
            JOptionPane.showMessageDialog(this, "Please Enter the User details");
        }
        if (row != -1 && query1 != null)
        {
          try {
                
                ResultSet rs1 = myQueries.excQuery(query1);
                rs1.next();
                issuerid = rs1.getInt("issuerid");
                username = rs1.getString("username");
                query = "select count(*) from accounts where username = '" + username + "';";
                ResultSet rs2 = myQueries.excQuery(query);
                rs2.next();
                count = rs2.getInt("count(*)");
                query = "select * from settings;";
                ResultSet rs3 = myQueries.excQuery(query);
                rs3.next();
                int issuetime = rs3.getInt("issuetime");
                int maxbooks = rs3.getInt("maxbooks");
                if (count >= maxbooks) 
                {
                    r = JOptionPane.showConfirmDialog(this, "This user has already issued " + maxbooks + " books do you still want to continue?", "Warning!", JOptionPane.YES_NO_OPTION);
                }
                if (r == 0) 
                {
                    Calendar curdate;
                    curdate = Calendar.getInstance();
                    Calendar returndate;
                    curdate.add(Calendar.DAY_OF_MONTH, issuetime);
                    returndate = curdate;
                    curdate = Calendar.getInstance();
                    int iyear = curdate.get(Calendar.YEAR);
                    int imonth = curdate.get(Calendar.MONTH) + 1;
                    int idayOfMonth = curdate.get(Calendar.DAY_OF_MONTH);
                    int ryear = returndate.get(Calendar.YEAR);
                    int rmonth = returndate.get(Calendar.MONTH) + 1;
                    int rdayOfMonth = returndate.get(Calendar.DAY_OF_MONTH);
                    String idate = "" + iyear + "/" + imonth + "/" + idayOfMonth;
                    String rdate = "" + ryear + "/" + rmonth + "/" + rdayOfMonth;
                    query = "insert into accounts values(" + issuerid + ",'" + username + "'," + bookcode + ",'" + bookname + "','" + idate + "','" + rdate + "');";
                    myQueries.excUpdate(query);
                    JOptionPane.showMessageDialog(this, "Book Succesfully issued");
                }
            } 
          catch (Exception f)
          {
                if (f.getMessage().equals("Duplicate entry '" + bookcode + "' for key 'PRIMARY'")) 
                {
                    JOptionPane.showMessageDialog(this, "This book has already been issued by you or someone else");
                } 
                else 
                {
                    JOptionPane.showMessageDialog(this, f.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jScrollPane1.setVisible(true);
        jScrollPane2.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int bookcode = 0;
        int n = 0;
        String bookname = null;
        String query;
        String query1 = null;
        int row = jTable1.getSelectedRow();
        int issuerid = 0;
        int m = 0;
        String username = t2.getText();

        if (row == -1) 
        {
            JOptionPane.showMessageDialog(this, "Please Select a Book");
        } 
        else
        {
            bookcode = (Integer) model.getValueAt(row, 0);
            bookname = (String) model.getValueAt(row, 1);
        }
        try 
        {
            issuerid = Integer.parseInt(t1.getText());
        } 
        catch (NumberFormatException e)
        {
            m = 1;
        }

        if (!(m == 1)) 
        {
            query1 = "select issuerid , username from users where issuerid=" + issuerid + ";";
        } 
        else if (!(username.isEmpty()))
        {
            query1 = "select issuerid , username from users where username='" + username + "';";

        } 
        else if (!(n == 1 && username.isEmpty()))
        {
            JOptionPane.showMessageDialog(this, "Please Enter any one of the user identifiers");
        } 
        else 
        {
            JOptionPane.showMessageDialog(this, "Please Enter the User details");
        }
        if (row != -1 && query1 != null) 
        {
            try 
            {
                
                ResultSet rs = myQueries.excQuery(query1);
                rs.next();
                issuerid = rs.getInt("issuerid");
                username = rs.getString("username");
                query = "delete from accounts where bookcode=" + bookcode + " and bookname='" + bookname + "'and issuerid=" + issuerid + " and username='" + username + "';";
                myQueries.excUpdate(query);
                jButton1.doClick();
                JOptionPane.showMessageDialog(this, "Book Succesfully Returned");
            } 
            catch (Exception f)
            {
                JOptionPane.showMessageDialog(this, f.getMessage());
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void t8CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_t8CaretUpdate
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(true);
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        String genre1 = t8.getText();
        String query;
        try {
           
            if (!(genre1.isEmpty())) 
            {
                query = "SELECT * FROM books where genre like '" + genre1 + "%';";
                ResultSet rs = myQueries.excQuery(query);
                model.setRowCount(0);
                while (rs.next())
                {
                    int Bookid = rs.getInt("Bookcode");
                    String Bookname = rs.getString("Bookname");
                    String author = rs.getString("author");
                    String genre = rs.getString("genre");
                    model.addRow(new Object[]{Bookid, Bookname, author, genre});
                }
            }else 
            {
                query = "SELECT * FROM books;";
                ResultSet rs = myQueries.excQuery(query);
                model.setRowCount(0);
                while (rs.next()) {
                    int Bookid = rs.getInt("Bookcode");
                    String Bookname = rs.getString("Bookname");
                    String author = rs.getString("author");
                    String genre = rs.getString("genre");
                    model.addRow(new Object[]{Bookid, Bookname, author, genre});
                }
            }
        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_t8CaretUpdate

    private void t7CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_t7CaretUpdate
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(true);
        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
        String author1 = t7.getText();
        String query;
        try {
            
            if (!(author1.isEmpty()))
            {
                query = "SELECT * FROM books where author like '" + author1 + "%';";
                ResultSet rs = myQueries.excQuery(query);
                model1.setRowCount(0);
                while (rs.next()) 
                {
                    int Bookid = rs.getInt("Bookcode");
                    String Bookname = rs.getString("Bookname");
                    String author = rs.getString("author");
                    String genre = rs.getString("genre");
                    model1.addRow(new Object[]{Bookid, Bookname, author, genre});
                }
            } else 
            {
                query = "SELECT * FROM books;";
                ResultSet rs = myQueries.excQuery(query);
                model1.setRowCount(0);
                while (rs.next()) 
                {
                    int Bookid = rs.getInt("Bookcode");
                    String Bookname = rs.getString("Bookname");
                    String author = rs.getString("author");
                    String genre = rs.getString("genre");
                    model1.addRow(new Object[]{Bookid, Bookname, author, genre});
                }
            }
        } catch (Exception e) 
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_t7CaretUpdate

    private void t6CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_t6CaretUpdate
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(true);
        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
        String bookname = t6.getText();
        String query;
        try {
           
            if (!(bookname.isEmpty())) 
            {
                query = "SELECT * FROM books where bookname like '" + bookname + "%';";
                ResultSet rs = myQueries.excQuery(query);
                model1.setRowCount(0);
                while (rs.next()) 
                {
                    int Bookid = rs.getInt("Bookcode");
                    String Bookname = rs.getString("Bookname");
                    String author = rs.getString("author");
                    String genre = rs.getString("genre");
                    model1.addRow(new Object[]{Bookid, Bookname, author, genre});
                }
            } else
            {
                query = "SELECT * FROM books;";
                ResultSet rs = myQueries.excQuery(query);
                model1.setRowCount(0);
                while (rs.next()) 
                {
                    int Bookid = rs.getInt("Bookcode");
                    String Bookname = rs.getString("Bookname");
                    String author = rs.getString("author");
                    String genre = rs.getString("genre");
                    model1.addRow(new Object[]{Bookid, Bookname, author, genre});
                }
            }
        } 
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_t6CaretUpdate

    private void t5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t5KeyTyped
        char kc = evt.getKeyChar();
        if (!(kc >= '0' && kc <= '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_t5KeyTyped

    private void t5CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_t5CaretUpdate
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(true);
        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
        int bookcode = 0;
        int n = 0;
        String query;
        try 
        {
            bookcode = Integer.parseInt(t5.getText());
        } 
        catch (NumberFormatException e)
        {
            n = 1;
        }

        try {
            
            if (!(n == 1))
            {
                query = "SELECT * FROM books where bookcode like '" + bookcode + "%';";
                ResultSet rs = myQueries.excQuery(query);
                model1.setRowCount(0);
                while (rs.next()) 
                {
                    int Bookid = rs.getInt("Bookcode");
                    String Bookname = rs.getString("Bookname");
                    String author = rs.getString("author");
                    String genre = rs.getString("genre");
                    model1.addRow(new Object[]{Bookid, Bookname, author, genre});
                }
            } else 
            {
                query = "SELECT * FROM books;";
                ResultSet rs = myQueries.excQuery(query);
                model1.setRowCount(0);
                while (rs.next()) 
                {
                    int Bookid = rs.getInt("Bookcode");
                    String Bookname = rs.getString("Bookname");
                    String author = rs.getString("author");
                    String genre = rs.getString("genre");
                    model1.addRow(new Object[]{Bookid, Bookname, author, genre});
                }
            }
        } 
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_t5CaretUpdate

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        t5.setText("");
        t6.setText("");
        t7.setText("");
        t8.setText("");
        t1.setText("");
        t2.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable2.getSelectedRow();
        int row1 = jTable1.getSelectedRow();
        int bookcode;
        if (row == -1) 
        {
            if (row1 == -1) 
            {
                JOptionPane.showMessageDialog(this, "Please Select a Book");
            } 
            else
            {
                bookcode = (Integer) model.getValueAt(row1, 0);
                bookDetails a = new bookDetails(bookcode);
                a.setVisible(true);
                row1=-1;
            }
        } 
        else 
        {
            bookcode = (Integer) model1.getValueAt(row, 0);
            bookDetails a = new bookDetails(bookcode);
            a.setVisible(true);
            row=-1;
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(true);
        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel();
        try {
            
            String query = "SELECT * FROM books;";
            ResultSet rs = myQueries.excQuery(query);
            model1.setRowCount(0);
            while (rs.next()) 
            {
                int Bookid = rs.getInt("Bookcode");
                String Bookname = rs.getString("Bookname");
                String author = rs.getString("author");
                String genre = rs.getString("genre");
                model1.addRow(new Object[]{Bookid, Bookname, author, genre});
            }
        }
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenu2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MousePressed
        BookRecords a = new BookRecords(username1);
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenu2MousePressed

    private void jMenu4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MousePressed
        ALLusers a = new ALLusers(username1);
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenu4MousePressed

    private void jMenu3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MousePressed
        Options a = new Options(username1);
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenu3MousePressed

    private void jMenu1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MousePressed
       StartPage a = new StartPage();
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenu1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
        new MainPage().setVisible(true);*/
        final MainPage mainPage = new MainPage();
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                mainPage.pack();
                mainPage.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t5;
    private javax.swing.JTextField t6;
    private javax.swing.JTextField t7;
    private javax.swing.JTextField t8;
    // End of variables declaration//GEN-END:variables
}
